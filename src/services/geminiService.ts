// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
class GeminiService {
  private baseUrl: string;

  constructor() {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Railway URL, –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - localhost
    this.baseUrl = import.meta.env.PROD 
      ? 'https://geminitest-production-3230.up.railway.app' 
      : 'http://localhost:3000';
  }

  async getPsychologicalAdvice(): Promise<{ advice: string; modelUsed: string }> {
    try {
      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
      
      const response = await fetch(`${this.baseUrl}/api/advice`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–æ–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏: ${data.modelUsed}`);
      return {
        advice: data.advice,
        modelUsed: data.modelUsed
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
      
      if (error instanceof Error) {
        if (error.message.includes('Failed to fetch')) {
          throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
        }
        throw error;
      }
      
      throw new Error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞.');
    }
  }
}

export default new GeminiService();
