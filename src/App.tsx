import { useState, useEffect } from 'react';
import geminiService from './services/geminiService';
import './App.css';

interface AdviceState {
  advice: string | null;
  loading: boolean;
  error: string | null;
  modelUsed?: string;
}

function App() {
  const [state, setState] = useState<AdviceState>({
    advice: null,
    loading: false,
    error: null
  });

  const [apiKeyConfigured, setApiKeyConfigured] = useState<boolean | null>(null);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ API –∫–ª—é—á
    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
    setApiKeyConfigured(apiKey && apiKey !== 'your_gemini_api_key_here');
  }, []);

  const handleGetAdvice = async () => {
    setState(prev => ({ ...prev, loading: true, error: null }));
    
    try {
      const result = await geminiService.getPsychologicalAdvice();
      setState(prev => ({ 
        ...prev, 
        advice: result.advice, 
        modelUsed: result.modelUsed,
        loading: false 
      }));
    } catch (error) {
      setState(prev => ({ 
        ...prev, 
        error: error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        loading: false 
      }));
    }
  };

  return (
    <div className="app">
      <div className="container">
        <header className="header">
          <h1>üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –°–æ–≤–µ—Ç</h1>
          <p>–ü–æ–ª—É—á–∏—Ç–µ –º—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç –æ—Ç Gemini 2.5 Pro –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è</p>
        </header>

        <main className="main">
          <div className="advice-section">
            {apiKeyConfigured === false && (
              <div className="setup-instructions">
                <h2>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞</h2>
                <div className="instructions-content">
                  <p>–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á –æ—Ç Google Gemini:</p>
                  <ol>
                    <li>–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ <a href="https://makersuite.google.com/app/apikey" target="_blank" rel="noopener noreferrer">Google AI Studio</a></li>
                    <li>–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Vercel –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:</li>
                    <ul>
                      <li><strong>–ò–º—è:</strong> VITE_GEMINI_API_KEY</li>
                      <li><strong>–ó–Ω–∞—á–µ–Ω–∏–µ:</strong> –≤–∞—à_api_–∫–ª—é—á</li>
                    </ul>
                    <li>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π –≤ Vercel</li>
                  </ol>
                </div>
              </div>
            )}

            <button 
              className="advice-button"
              onClick={handleGetAdvice}
              disabled={state.loading || apiKeyConfigured === false}
            >
              {state.loading ? '–ü–æ–ª—É—á–∞—é —Å–æ–≤–µ—Ç...' : '–ü–æ–ª—É—á–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç'}
            </button>

            {state.error && (
              <div className="error-message">
                <p>‚ùå {state.error}</p>
              </div>
            )}

            {state.advice && (
              <div className="advice-result">
                <h2>üí° –í–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç:</h2>
                <div className="advice-text">
                  {state.advice}
                </div>
                {state.modelUsed && (
                  <div className="model-info">
                    <small>ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª—å—é: {state.modelUsed}</small>
                  </div>
                )}
              </div>
            )}
          </div>
        </main>

        <footer className="footer">
          <p>Powered by Google Gemini 2.5 Pro AI</p>
        </footer>
      </div>
    </div>
  );
}

export default App;