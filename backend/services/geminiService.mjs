import { GoogleGenerativeAI } from '@google/generative-ai';

class GeminiService {
  constructor() {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      console.error('‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      throw new Error('GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    this.genAI = new GoogleGenerativeAI(apiKey);
    console.log('ü§ñ Gemini Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  async getPsychologicalAdvice() {
    try {
      console.log('üß† –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞...');
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–æ—Ç —Å–∞–º—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫ –Ω–æ–≤—ã–º)
      const models = [
        'gemini-1.5-flash',      // –°–∞–º–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
        'gemini-1.5-pro',        // –ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å 1.5 (—à–∏—Ä–æ–∫–æ –¥–æ—Å—Ç—É–ø–Ω–∞)
        'gemini-2.0-flash',      // –°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Gemini 2.0
        'gemini-2.0-flash-exp',  // –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Gemini 2.0
        'gemini-2.5-pro',        // –°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å Gemini 2.5 Pro (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å)
        'gemini-pro'             // –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      ];
      let lastError = null;

      for (const modelName of models) {
        try {
          console.log(`–ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: ${modelName}`);
          const model = this.genAI.getGenerativeModel({ model: modelName });
          
          const prompt = "–ù–∞–ø–∏—à–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç";
          
          const result = await model.generateContent(prompt);
          const response = await result.response;
          const text = response.text();
          
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${modelName}`);
          return { advice: text, modelUsed: modelName };
        } catch (modelError) {
          console.warn(`‚ö†Ô∏è –ú–æ–¥–µ–ª—å ${modelName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:`, modelError);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
          if (modelError instanceof Error && modelError.message.includes('User location is not supported')) {
            console.warn(`üåç –ú–æ–¥–µ–ª—å ${modelName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ`);
          }
          
          lastError = modelError;
          continue;
        }
      }

      // –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
      throw lastError || new Error('–í—Å–µ –º–æ–¥–µ–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      
    } catch (error) {
      console.error('Gemini API Error:', error);
      
      if (error instanceof Error && error.message.includes('API –∫–ª—é—á')) {
        throw error;
      }
      
      if (error instanceof Error && error.message.includes('–º–æ–¥–µ–ª–∏')) {
        throw new Error('–í—Å–µ –º–æ–¥–µ–ª–∏ Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Google.');
      }
      
      if (error instanceof Error && error.message.includes('User location is not supported')) {
        throw new Error('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å.');
      }
      
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.');
    }
  }
}

export default new GeminiService();
