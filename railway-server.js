import express from 'express';
import cors from 'cors';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3000;

console.log('🚀 Starting Railway server...');
console.log('📊 Environment variables:');
console.log('  PORT:', process.env.PORT);
console.log('  NODE_ENV:', process.env.NODE_ENV);
console.log('  GEMINI_API_KEY:', process.env.GEMINI_API_KEY ? 'SET' : 'NOT SET');

// Middleware
app.use(cors({
  origin: [
    'https://geminitest-production-3230.up.railway.app',
    'http://localhost:3000',
    'http://localhost:5173'
  ],
  credentials: true
}));
app.use(express.json());

// Serve static files from dist folder
app.use(express.static(path.join(__dirname, 'dist')));

// Health check endpoint
app.get('/api/health', (req, res) => {
  console.log('🏥 Health check requested');
  res.json({ 
    status: 'OK', 
    message: 'Railway server is running',
    timestamp: new Date().toISOString(),
    port: PORT,
    nodeEnv: process.env.NODE_ENV || 'development',
    pid: process.pid,
    geminiApiKey: process.env.GEMINI_API_KEY ? 'SET' : 'NOT SET'
  });
});

// Test endpoint
app.get('/api/test', (req, res) => {
  console.log('🧪 Test endpoint called');
  res.json({
    success: true,
    message: 'Railway test endpoint works!',
    timestamp: new Date().toISOString(),
    server: 'railway-server'
  });
});

// Advice endpoint (with Gemini API)
app.post('/api/advice', async (req, res) => {
  console.log('📝 Advice request received');
  
  try {
    // Try to load Gemini service
    let geminiService = null;
    try {
      const geminiModule = await import('./backend/services/geminiService.mjs');
      geminiService = geminiModule.default;
      console.log('✅ Gemini Service loaded successfully');
    } catch (error) {
      console.warn('⚠️ Gemini Service not available:', error.message);
    }

    if (geminiService) {
      // Use real Gemini API
      const result = await geminiService.getPsychologicalAdvice();
      console.log(`✅ Advice generated by model: ${result.modelUsed}`);
      
      res.json({
        success: true,
        advice: result.advice,
        modelUsed: result.modelUsed,
        timestamp: new Date().toISOString(),
        server: 'railway-server'
      });
    } else {
      // Fallback response
      res.json({
        success: true,
        advice: "Это тестовый совет от Railway сервера. Gemini API не настроен, но сервер работает!",
        modelUsed: "railway-fallback",
        timestamp: new Date().toISOString(),
        server: 'railway-server'
      });
    }
  } catch (error) {
    console.error('❌ Error generating advice:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString(),
      server: 'railway-server'
    });
  }
});

// Serve React app for all other routes
app.get('*', (req, res) => {
  console.log('📁 Serving React app for:', req.path);
  res.sendFile(path.join(__dirname, 'dist', 'index.html'), (err) => {
    if (err) {
      console.error('❌ Error serving React app:', err);
      res.status(404).json({
        error: 'Frontend not found',
        path: req.path,
        timestamp: new Date().toISOString()
      });
    }
  });
});

// Error handling
process.on('uncaughtException', (error) => {
  console.error('🚨 Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('🚨 Unhandled Rejection at:', promise, 'reason:', reason);
});

// Start server
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`🚀 Railway server запущен на порту ${PORT}`);
  console.log(`🌐 Health check: http://localhost:${PORT}/api/health`);
  console.log(`🧪 Test endpoint: http://localhost:${PORT}/api/test`);
  console.log(`📝 Advice endpoint: http://localhost:${PORT}/api/advice`);
  console.log(`🔧 Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`📊 Process ID: ${process.pid}`);
  console.log(`📁 Static files: ${path.join(__dirname, 'dist')}`);
});

// Server error handling
server.on('error', (error) => {
  console.error('🚨 Server error:', error);
  if (error.code === 'EADDRINUSE') {
    console.error(`❌ Port ${PORT} is already in use`);
  }
  process.exit(1);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('🛑 SIGTERM received, shutting down gracefully');
  server.close(() => {
    console.log('✅ Server closed');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('🛑 SIGINT received, shutting down gracefully');
  server.close(() => {
    console.log('✅ Server closed');
    process.exit(0);
  });
});
